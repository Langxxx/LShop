<?php
/**
 * Created by PhpStorm.
 * User: wl
 * Date: 16/11/7
 * Time: 19:14
 */
namespace App\Repositories\Eloquent;

use App\Models\GoodsStock;
use App\Models\Order;
use App\Repositories\Eloquent\Repository;
use Carbon\Carbon;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\DB;
use Mockery\CountValidator\Exception;

class OrderRepository extends  Repository
{
    protected $fp;

    public function model()
    {
        return Order::class;
    }

    public function create(array $attributes)
    {
        $orderInfo = $attributes['order_info'];
        $orderInfo['create_at'] = Carbon::now();
        $goodsInfos = $attributes['goods_infos'];
        //加锁
        $this->fp = fopen('./order.lock', 'r');
        flock($this->fp, LOCK_EX);

        //检查库存量是否满足
        $goodsStock = new GoodsStock();
        $goodsStockInfo = [];
        foreach ($goodsInfos as $goodsInfo) {
            $stockInfo = $goodsStock->where('goods_id', $goodsInfo['goods_id'])
                ->where('goods_attr_id', $goodsInfo['goods_attr_id'])
                ->first();
            if($stockInfo == null || $stockInfo->number < $goodsInfo['goods_number']) {
                //释放锁
                flock($this->fp, LOCK_UN);
                fclose($this->fp);
                return ['status' => false, 'error' => '商品库存不足!'];
            }
            $goodsStockInfo[] = $stockInfo;
        }

        //启动事务
        try {
            DB::transaction(function () use ($orderInfo, $goodsInfos, $goodsStockInfo){
                // 创建订单
                $order = parent::create($orderInfo);
                foreach ($goodsInfos as $index => $goodsInfo) {
                    // 创建订单商品数据
                    $order->goods()->attach($goodsInfo['goods_id'], $goodsInfo);
                    // 减少库存
                    $goodsStockInfo[$index]->number -= $goodsInfo['goods_number'];
                    $goodsStockInfo[$index]->save();
                }
            });
        }catch (QueryException $e) {
            flock($this->fp, LOCK_UN);
            fclose($this->fp);
            return ['status' => false, 'error' => '订单创建失败,请稍后尝试!'];
        }

        flock($this->fp, LOCK_UN);
        fclose($this->fp);

        return ['status' => true]; // TODO: Change the autogenerated stub
    }
}